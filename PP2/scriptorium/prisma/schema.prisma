// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  role        String        @default("USER")
  avatar      String?       
  phone       String?           
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  templates   CodeTemplate[]
  blogPosts   BlogPost[]
  comments    Comment[]
  reports     Report[]
  ratings     Rating[]
}

model CodeTemplate {
  id          Int           @id @default(autoincrement())
  title       String
  explanation String
  tags        String
  code        String
  language    String        
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  forkedFrom  CodeTemplate? @relation("Forks", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks       CodeTemplate[] @relation("Forks")
  blogPosts   BlogPost[]  
}

model BlogPost {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  tag         String
  content     String
  upvotes     Int           @default(0)
  downvotes   Int           @default(0)
  report_count Int          @default(0)
  isHidden    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  templates   CodeTemplate[]
  comments    Comment[]
  reports     Report[]
  ratings     Rating[]
}

model Comment {
  id          Int           @id @default(autoincrement())
  content     String
  upvotes     Int           @default(0)
  downvotes   Int           @default(0)
  report_count Int          @default(0)
  isHidden    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  blogPost    BlogPost      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  Int
  parent      Comment?      @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int?
  children    Comment[]     @relation("CommentHierarchy")
  reports     Report[]
  ratings     Rating[]
}

model Report {
  id          Int           @id @default(autoincrement())
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  blog        BlogPost?     @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  Int?
  comment     Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   Int?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Rating {
  id          Int           @id @default(autoincrement())
  votetype    String
  createdAt   DateTime      @default(now())
  blog        BlogPost?     @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  Int?
  comment     Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   Int?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}